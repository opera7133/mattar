import { Menu, Transition } from '@headlessui/react'
import Head from 'next/head'
import Link from 'next/link'
import Header from 'components/Header'
import Footer from 'components/Footer'
import Button from 'components/Button'
import { BsSearch, BsThreeDots } from 'react-icons/bs'
import { useState, Fragment } from 'react'
import stringWidth from 'string-width'
import twemoji from 'twemoji'
import type { GetServerSideProps } from 'next'
import prisma from 'lib/prisma'
import type { Mattar, User } from '@prisma/client'
import * as linkify from 'linkifyjs'
import linkifyHtml from 'linkify-html'
import 'linkify-plugin-mention'
import { useSession, getSession } from 'next-auth/react'

type Props = {
  mattars: Mattar[]
  user?: User | undefined
}

const Mention = (props: Props) => {
  const [text, setText] = useState('')
  const { data: session } = useSession()
  const checkTextArea = (e: any) => {
    const newText = e.target.value.replace(/\n/g, '')
    setText(e.target.value)
  }
  const getElapsedTime = (date: Date | string) => {
    const newDate = typeof date === 'string' ? new Date(date) : date
    const today = new Date()
    const diff = today.getTime() - newDate.getTime()
    const elapsed = new Date(diff)
    if (
      elapsed.getUTCFullYear() &&
      newDate.getFullYear() !== today.getFullYear()
    ) {
      return (
        newDate.getFullYear() +
        '年' +
        (newDate.getMonth() + 1) +
        '月' +
        newDate.getDate() +
        '日'
      )
    } else if (elapsed.getUTCDate() - 1) {
      return newDate.getMonth() + 1 + '月' + newDate.getDate() + '日'
    } else if (elapsed.getUTCHours()) {
      return elapsed.getUTCHours() + '時間前'
    } else if (elapsed.getUTCMinutes()) {
      return elapsed.getUTCMinutes() + '分前'
    } else {
      return 'たった今'
    }
  }
  const postMattar = async () => {
    setText('')
    await fetch('/api/mattars', {
      method: 'POST',
      headers: {
        'Content-Type': 'application/json',
      },
      body: JSON.stringify({
        message: text,
        source: 'Mattar Web Client',
        userId: 'ccc',
      }),
    })
  }
  const deleteMattar = async (id: string) => {
    await fetch('/api/mattars?id=' + id, {
      method: 'DELETE',
    })
  }

  const linkifyOptions = {
    className: function (_href: string, type: string) {
      return 'text-sky-500'
    },
    target: {
      url: '_blank',
    },
    nl2br: true,
    defaultProtocol: 'https',
  }
  return (
    <div className="dark:bg-zinc-800 dark:text-white h-screen">
      <Head>
        <title>@wamo | mattar.li</title>
        <meta name="description" content="Generated by create next app" />
        <link
          rel="apple-touch-icon"
          sizes="180x180"
          href="/img/favicon/apple-touch-icon.png"
        />
        <link
          rel="icon"
          type="image/png"
          sizes="32x32"
          href="/img/favicon/favicon-32x32.png"
        />
        <link
          rel="icon"
          type="image/png"
          sizes="16x16"
          href="/img/favicon/favicon-16x16.png"
        />
        <link rel="manifest" href="/site.webmanifest" />
        <link
          rel="mask-icon"
          href="/img/favicon/safari-pinned-tab.svg"
          color="#5bbad5"
        />
        <meta name="msapplication-TileColor" content="#2b5797" />
        <meta name="theme-color" content="#ffffff" />
      </Head>
      <Header />
      <main className="px-4 mx-auto max-w-6xl grid grid-cols-3 gap-6">
        <div className="col-span-2 py-4">
          <div>
            <div className="flex items-center justify-between">
              <p className="text-xl my-2">いま、どうしてる？</p>
              <p
                className={
                  60 - stringWidth(text.replace(/\n/g, '')) < 0
                    ? 'font-bold text-3xl opacity-80 text-red-500'
                    : 'font-bold text-3xl opacity-40'
                }
              >
                {60 - stringWidth(text.replace(/\n/g, ''))}
              </p>
            </div>
            <textarea
              onChange={checkTextArea}
              value={text}
              className="rounded-md focus:ring-0 focus:border-gray-500 w-full h-auto text-black"
            ></textarea>
            <Button
              className="block ml-auto bg-primary text-white px-4 py-2 rounded-md shadow-md hover:shadow-sm duration-200"
              onClick={() => postMattar()}
            >
              つぶやく
            </Button>
          </div>
          <div className="my-6">
            <h3 className="text-xl">@wamo</h3>
            <hr className="my-3" />
            <div className="flex flex-col gap-1">
              {props.mattars.map((item) => {
                if (item.message.includes('@wamo'))
                  return (
                    <article
                      className="relative flex gap-3 group"
                      key={item.id}
                    >
                      <img
                        src={
                          item.user.profile_picture
                            ? item.user.profile_picture
                            : 'https://aui.atlassian.com/aui/latest/docs/images/avatar-person.svg'
                        }
                        className="w-14 h-14 shrink-0 mt-2"
                      />
                      <div>
                        <span className="font-bold">{item.user.name}</span>
                        <div
                          dangerouslySetInnerHTML={{
                            __html: linkifyHtml(item.message, linkifyOptions),
                          }}
                        ></div>
                        <span
                          className="text-xs text-gray-400"
                          title={item.createdAt}
                        >
                          {getElapsedTime(item.createdAt)}
                        </span>
                      </div>
                      {props.user.id === item.user.id && (
                        <Menu>
                          <Menu.Button>
                            <BsThreeDots className="absolute right-0 top-2 opacity-0 duration-200 group-hover:opacity-80" />
                          </Menu.Button>
                          <Transition
                            as={Fragment}
                            enter="transition ease-out duration-100"
                            enterFrom="transform opacity-0 scale-95"
                            enterTo="transform opacity-100 scale-100"
                            leave="transition ease-in duration-75"
                            leaveFrom="transform opacity-100 scale-100"
                            leaveTo="transform opacity-0 scale-95"
                          >
                            <Menu.Items className="text-sm shadow-md absolute right-0 top-7 flex flex-col">
                              <Menu.Item>
                                {({ active }) => (
                                  <button
                                    className={`px-2 py-1 text-left ${
                                      active && 'bg-gray-200'
                                    }`}
                                  >
                                    リンクをコピー
                                  </button>
                                )}
                              </Menu.Item>
                              <Menu.Item>
                                {({ active }) => (
                                  <button
                                    className={`px-2 py-1 text-left ${
                                      active && 'bg-gray-200'
                                    }`}
                                    onClick={() => deleteMattar(item.id)}
                                  >
                                    削除
                                  </button>
                                )}
                              </Menu.Item>
                            </Menu.Items>
                          </Transition>
                        </Menu>
                      )}
                    </article>
                  )
              })}
            </div>
          </div>
        </div>
        <div className="col-span-1 py-4">
          <div className="px-3 flex gap-3 items-center">
            <img
              src={
                props.user.profile_picture
                  ? props.user.profile_picture
                  : 'https://aui.atlassian.com/aui/latest/docs/images/avatar-person.svg'
              }
              className="w-12"
            />
            <div>
              <p className="font-bold">{props.user.name}</p>
              <p>
                {props.mattars.filter((n) => n.userId === props.user.id).length}
                のつぶやき
              </p>
            </div>
          </div>
          <table className="my-3 border-separate border-spacing-x-2.5">
            <tbody>
              <tr>
                <td>
                  <p className="font-bold">1</p>
                  <p>フォロー中</p>
                </td>
                <td>
                  <p className="font-bold">0</p>
                  <p>フォロワー</p>
                </td>
                <td>
                  <p className="font-bold">0</p>
                  <p>リスト</p>
                </td>
              </tr>
            </tbody>
          </table>
          <div className="flex flex-col">
            <Link href="/">
              <a className="px-3 py-1 duration-300 hover:bg-gray-200 dark:hover:bg-zinc-500">
                ホーム
              </a>
            </Link>
            <Link href="/at">
              <a className="px-3 py-1 bg-primary text-white">
                @{props.user.name}
              </a>
            </Link>
            <Link href="/msg">
              <a className="px-3 py-1 duration-300 hover:bg-gray-200 dark:hover:bg-zinc-500">
                メッセージ
              </a>
            </Link>
            <Link href="/fav">
              <a className="px-3 py-1 duration-300 hover:bg-gray-200 dark:hover:bg-zinc-500">
                お気に入り
              </a>
            </Link>
            <Link href="/rtw">
              <a className="px-3 py-1 duration-300 hover:bg-gray-200 dark:hover:bg-zinc-500">
                リツイート
              </a>
            </Link>
          </div>
          <div className="my-4 px-3 flex">
            <input
              placeholder="検索"
              type="text"
              className="text-black w-full h-9 rounded-md rounded-r-none focus:ring-0 focus:border-gray-500 border-r-0"
            />
            <Button
              className="bg-primary px-3 h-9 border border-primary rounded-md rounded-l-none hover:opacity-80 duration-300"
              onClick={() => {}}
            >
              <BsSearch className="fill-white" size={18} />
            </Button>
          </div>
          <Footer />
        </div>
      </main>
    </div>
  )
}

export const getServerSideProps: GetServerSideProps<Props> = async (ctx) => {
  const session = await getSession(ctx)
  if (session && session.user) {
    const mattars = JSON.parse(
      JSON.stringify(await prisma.mattar.findMany({ include: { user: true } }))
    ).reverse()
    const user = JSON.parse(
      JSON.stringify(
        await prisma.user.findUnique({
          where: {
            id: session.user.name,
          },
        })
      )
    )
    return {
      props: {
        user,
        mattars,
      },
    }
  } else {
    const mattars = JSON.parse(
      JSON.stringify(await prisma.mattar.findMany({ include: { user: true } }))
    ).reverse()
    return {
      props: {
        mattars,
      },
    }
  }
}

export default Mention
