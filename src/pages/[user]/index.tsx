import Head from 'next/head'
import Link from 'next/link'
import Header from 'components/Header'
import Footer from 'components/Footer'
import Button from 'components/Button'
import {
  BsSearch,
  BsThreeDots,
  BsLink,
  BsStar,
  BsReply,
  BsStarFill,
  BsTrash,
} from 'react-icons/bs'
import { useState, Fragment } from 'react'
import twemoji from 'twemoji'
import type { GetServerSideProps } from 'next'
import prisma from 'lib/prisma'
import type { Mattar, User } from '@prisma/client'
import * as linkify from 'linkifyjs'
import linkifyHtml from 'linkify-html'
import 'linkify-plugin-mention'
import { useSession, getSession } from 'next-auth/react'
import { useRouter } from 'next/router'
import { Menu, Transition } from '@headlessui/react'

type Props = {
  mattars: Mattar[]
  user?: User | undefined
  pUser: User
}

const Profile = (props: Props) => {
  const { data: session } = useSession()
  const router = useRouter()
  const page = router.query.page || 'mattars'
  const [state, setState] = useState(page)
  const deleteMattar = async (id: string) => {
    await fetch('/api/statuses/destroy/' + id, {
      method: 'DELETE',
    })
  }
  const linkifyOptions = {
    className: function (_href: string, type: string) {
      return 'text-sky-500'
    },
    target: {
      url: '_blank',
    },
    nl2br: true,
    defaultProtocol: 'https',
  }
  const getElapsedTime = (date: Date | string) => {
    const newDate = typeof date === 'string' ? new Date(date) : date
    const today = new Date()
    const diff = today.getTime() - newDate.getTime()
    const elapsed = new Date(diff)
    if (
      elapsed.getUTCFullYear() &&
      newDate.getFullYear() !== today.getFullYear()
    ) {
      return (
        newDate.getFullYear() +
        '年' +
        (newDate.getMonth() + 1) +
        '月' +
        newDate.getDate() +
        '日'
      )
    } else if (elapsed.getUTCDate() - 1) {
      return newDate.getMonth() + 1 + '月' + newDate.getDate() + '日'
    } else if (elapsed.getUTCHours()) {
      return elapsed.getUTCHours() + '時間前'
    } else if (elapsed.getUTCMinutes()) {
      return elapsed.getUTCMinutes() + '分前'
    } else {
      return 'たった今'
    }
  }
  const setPage = (name: string) => {
    setState(name)
    router.query.page = name
    router.push(router)
  }
  return (
    <div className="dark:bg-zinc-800 dark:text-white h-screen">
      <Head>
        <title>
          {props.pUser.name} ({props.pUser.id}) on mattar.li
        </title>
        <meta name="description" content="Generated by create next app" />
        <link
          rel="apple-touch-icon"
          sizes="180x180"
          href="/img/favicon/apple-touch-icon.png"
        />
        <link
          rel="icon"
          type="image/png"
          sizes="32x32"
          href="/img/favicon/favicon-32x32.png"
        />
        <link
          rel="icon"
          type="image/png"
          sizes="16x16"
          href="/img/favicon/favicon-16x16.png"
        />
        <link rel="manifest" href="/site.webmanifest" />
        <link
          rel="mask-icon"
          href="/img/favicon/safari-pinned-tab.svg"
          color="#5bbad5"
        />
        <meta name="msapplication-TileColor" content="#2b5797" />
        <meta name="theme-color" content="#ffffff" />
      </Head>
      <Header />
      <main className="px-4 mx-auto max-w-6xl grid grid-cols-3 gap-6">
        <div className="col-span-3 lg:col-span-2 py-4">
          <div className="my-6">
            <div className="relative flex gap-4">
              <img
                src={props.pUser.profile_picture}
                className="w-28 h-28 shrink-0 mt-2"
              />
              <div>
                <h1 className="text-4xl font-bold">{props.pUser.name}</h1>
                <h2 className="text-xl font-bold">
                  @{props.pUser.id}{' '}
                  {props.pUser.location && (
                    <span>in {props.pUser.location}</span>
                  )}
                </h2>
                <p>{props.pUser.description}</p>
                {props.user?.id === props.pUser.id ? (
                  <Button
                    className="absolute top-2 right-5 bg-primary text-white px-4 py-2 shadow-md duration-200 hover:shadow-sm rounded-md"
                    onClick={() => {}}
                  >
                    プロフィールを編集
                  </Button>
                ) : (
                  <div>
                    <Button
                      className="absolute top-2 right-20 bg-primary text-white px-4 py-2 shadow-md duration-200 hover:shadow-sm rounded-md"
                      onClick={() => {}}
                    >
                      フォロー
                    </Button>
                    <Button
                      className="absolute top-2 right-5 bg-primary text-white px-3.5 py-3 shadow-md duration-200 hover:shadow-sm rounded-md"
                      onClick={() => {}}
                    >
                      <BsThreeDots />
                    </Button>
                  </div>
                )}
              </div>
            </div>
            <hr className="my-3" />
            <div className="flex flex-col gap-1">
              {props.mattars.map((item) => {
                if (state === 'mattars') {
                  return (
                    <article
                      className="flex gap-3 group relative"
                      key={item.id}
                    >
                      <img
                        src={item.user.profile_picture}
                        className="w-14 h-14 shrink-0 mt-2"
                      />
                      <div>
                        <span className="font-bold">{item.user.name}</span>
                        <div
                          dangerouslySetInnerHTML={{
                            __html: linkifyHtml(
                              twemoji.parse(item.message),
                              linkifyOptions
                            ),
                          }}
                        ></div>
                        <div className="text-xs text-gray-400">
                          <span title={item.createdAt.toString()}>
                            {getElapsedTime(item.createdAt)}
                          </span>
                          {session && (
                            <span>
                              <span
                                className={`ml-3 duration-200 ${
                                  !props.user?.favorites
                                    .map(function (i: any) {
                                      return i.mattarId
                                    })
                                    .includes(item.id) &&
                                  'lg:opacity-0 lg:group-hover:opacity-100'
                                }`}
                              >
                                <button
                                  className={`duration-200 ${
                                    props.user?.favorites
                                      .map(function (i: any) {
                                        return i.mattarId
                                      })
                                      .includes(item.id)
                                      ? 'text-orange-400'
                                      : 'hover:text-orange-400'
                                  }`}
                                  onClick={() => {
                                    if (
                                      props.user?.favorites
                                        .map(function (i: any) {
                                          return i.mattarId
                                        })
                                        .includes(item.id)
                                    ) {
                                      disfavMattar(item.id)
                                    } else {
                                      favMattar(item.id)
                                    }
                                  }}
                                >
                                  {props.user?.favorites
                                    .map(function (i: any) {
                                      return i.mattarId
                                    })
                                    .includes(item.id) ? (
                                    <BsStarFill className="inline-block mb-1" />
                                  ) : (
                                    <BsStar className="inline-block mb-1" />
                                  )}
                                  お気に入り
                                </button>
                              </span>
                              <span className="ml-2 duration-200 lg:opacity-0 lg:group-hover:opacity-100 z-0">
                                <button className="duration-200 hover:text-green-400 z-0">
                                  <svg
                                    xmlns="http://www.w3.org/2000/svg"
                                    width="14"
                                    height="14"
                                    fill="currentColor"
                                    className="inline-block mb-1"
                                    viewBox="0 0 16 16"
                                  >
                                    <path d="M11 5.466V4H5a4 4 0 0 0-3.584 5.777.5.5 0 1 1-.896.446A5 5 0 0 1 5 3h6V1.534a.25.25 0 0 1 .41-.192l2.36 1.966c.12.1.12.284 0 .384l-2.36 1.966a.25.25 0 0 1-.41-.192Zm3.81.086a.5.5 0 0 1 .67.225A5 5 0 0 1 11 13H5v1.466a.25.25 0 0 1-.41.192l-2.36-1.966a.25.25 0 0 1 0-.384l2.36-1.966a.25.25 0 0 1 .41.192V12h6a4 4 0 0 0 3.585-5.777.5.5 0 0 1 .225-.67Z" />
                                  </svg>
                                  リツイート
                                </button>
                              </span>
                              <span className="ml-2 duration-200 lg:opacity-0 lg:group-hover:opacity-100">
                                <button className="duration-200 hover:text-sky-400">
                                  <BsReply
                                    className="inline-block mb-1"
                                    size={15}
                                  />
                                  返信
                                </button>
                              </span>
                            </span>
                          )}
                        </div>
                      </div>
                      <Menu>
                        <Menu.Button>
                          <BsThreeDots className="absolute right-0 top-2 duration-200 opacity-80 lg:opacity-0 lg:group-hover:opacity-80" />
                        </Menu.Button>
                        <Transition
                          as={Fragment}
                          enter="transition ease-out duration-100"
                          enterFrom="transform opacity-0 scale-95"
                          enterTo="transform opacity-100 scale-100"
                          leave="transition ease-in duration-75"
                          leaveFrom="transform opacity-100 scale-100"
                          leaveTo="transform opacity-0 scale-95"
                        >
                          <Menu.Items className="text-sm shadow-md absolute right-0 top-7 flex flex-col">
                            <Menu.Item>
                              {({ active }) => (
                                <button
                                  className="duration-200 px-2 py-1 text-left bg-white hover:bg-gray-200 hover:dark:bg-zinc-600 dark:bg-zinc-800"
                                  onClick={() =>
                                    navigator.clipboard.writeText(
                                      `http://localhost:3000/${item.userId}/status/${item.id}`
                                    )
                                  }
                                >
                                  リンクをコピー
                                </button>
                              )}
                            </Menu.Item>
                            {props.user?.id === item.user?.id && (
                              <Menu.Item>
                                {({ active }) => (
                                  <button
                                    className="duration-200 px-2 py-1 text-left bg-white hover:bg-gray-200 hover:dark:bg-zinc-600 dark:bg-zinc-800"
                                    onClick={() => deleteMattar(item.id)}
                                  >
                                    削除
                                  </button>
                                )}
                              </Menu.Item>
                            )}
                          </Menu.Items>
                        </Transition>
                      </Menu>
                    </article>
                  )
                } else if (state === 'fav') {
                  if (
                    item.favorites
                      .map(function (i: any) {
                        return i.userId
                      })
                      .includes(props.user?.id)
                  )
                    return (
                      <article
                        className="flex gap-3 group relative"
                        key={item.id}
                      >
                        <img
                          src={item.user.profile_picture}
                          className="w-14 h-14 shrink-0 mt-2"
                        />
                        <div>
                          <span className="font-bold">{item.user.name}</span>
                          <div
                            dangerouslySetInnerHTML={{
                              __html: linkifyHtml(item.message, linkifyOptions),
                            }}
                          ></div>
                          <div className="text-xs text-gray-400">
                            <span title={item.createdAt.toString()}>
                              {getElapsedTime(item.createdAt)}
                            </span>
                            {session && (
                              <span>
                                <span
                                  className={`ml-3 duration-200 ${
                                    !props.user?.favorites
                                      .map(function (i: any) {
                                        return i.mattarId
                                      })
                                      .includes(item.id) &&
                                    'lg:opacity-0 lg:group-hover:opacity-100'
                                  }`}
                                >
                                  <button
                                    className={`duration-200 ${
                                      props.user?.favorites
                                        .map(function (i: any) {
                                          return i.mattarId
                                        })
                                        .includes(item.id)
                                        ? 'text-orange-400'
                                        : 'hover:text-orange-400'
                                    }`}
                                    onClick={() => {
                                      if (
                                        props.user?.favorites
                                          .map(function (i: any) {
                                            return i.mattarId
                                          })
                                          .includes(item.id)
                                      ) {
                                        disfavMattar(item.id)
                                      } else {
                                        favMattar(item.id)
                                      }
                                    }}
                                  >
                                    {props.user?.favorites
                                      .map(function (i: any) {
                                        return i.mattarId
                                      })
                                      .includes(item.id) ? (
                                      <BsStarFill className="inline-block mb-1" />
                                    ) : (
                                      <BsStar className="inline-block mb-1" />
                                    )}
                                    お気に入り
                                  </button>
                                </span>
                                <span className="ml-2 duration-200 lg:opacity-0 lg:group-hover:opacity-100 z-0">
                                  <button className="duration-200 hover:text-green-400 z-0">
                                    <svg
                                      xmlns="http://www.w3.org/2000/svg"
                                      width="14"
                                      height="14"
                                      fill="currentColor"
                                      className="inline-block mb-1"
                                      viewBox="0 0 16 16"
                                    >
                                      <path d="M11 5.466V4H5a4 4 0 0 0-3.584 5.777.5.5 0 1 1-.896.446A5 5 0 0 1 5 3h6V1.534a.25.25 0 0 1 .41-.192l2.36 1.966c.12.1.12.284 0 .384l-2.36 1.966a.25.25 0 0 1-.41-.192Zm3.81.086a.5.5 0 0 1 .67.225A5 5 0 0 1 11 13H5v1.466a.25.25 0 0 1-.41.192l-2.36-1.966a.25.25 0 0 1 0-.384l2.36-1.966a.25.25 0 0 1 .41.192V12h6a4 4 0 0 0 3.585-5.777.5.5 0 0 1 .225-.67Z" />
                                    </svg>
                                    リツイート
                                  </button>
                                </span>
                                <span className="ml-2 duration-200 lg:opacity-0 lg:group-hover:opacity-100">
                                  <button className="duration-200 hover:text-sky-400">
                                    <BsReply
                                      className="inline-block mb-1"
                                      size={15}
                                    />
                                    返信
                                  </button>
                                </span>
                              </span>
                            )}
                          </div>
                        </div>
                        <Menu>
                          <Menu.Button>
                            <BsThreeDots className="absolute right-0 top-2 duration-200 opacity-80 lg:opacity-0 lg:group-hover:opacity-80" />
                          </Menu.Button>
                          <Transition
                            as={Fragment}
                            enter="transition ease-out duration-100"
                            enterFrom="transform opacity-0 scale-95"
                            enterTo="transform opacity-100 scale-100"
                            leave="transition ease-in duration-75"
                            leaveFrom="transform opacity-100 scale-100"
                            leaveTo="transform opacity-0 scale-95"
                          >
                            <Menu.Items className="text-sm shadow-md absolute right-0 top-7 flex flex-col">
                              <Menu.Item>
                                {({ active }) => (
                                  <button
                                    className="duration-200 px-2 py-1 text-left bg-white hover:bg-gray-200 hover:dark:bg-zinc-600 dark:bg-zinc-800"
                                    onClick={() =>
                                      navigator.clipboard.writeText(
                                        `http://localhost:3000/${item.userId}/status/${item.id}`
                                      )
                                    }
                                  >
                                    リンクをコピー
                                  </button>
                                )}
                              </Menu.Item>
                              {props.user?.id === item.user?.id && (
                                <Menu.Item>
                                  {({ active }) => (
                                    <button
                                      className="duration-200 px-2 py-1 text-left bg-white hover:bg-gray-200 hover:dark:bg-zinc-600 dark:bg-zinc-800"
                                      onClick={() => deleteMattar(item.id)}
                                    >
                                      削除
                                    </button>
                                  )}
                                </Menu.Item>
                              )}
                            </Menu.Items>
                          </Transition>
                        </Menu>
                      </article>
                    )
                }
              })}
            </div>
          </div>
        </div>
        <div className="col-span-3 lg:col-span-1 py-4">
          {session && (
            <div>
              <div className="px-3 flex gap-3 items-center">
                <img src={props.pUser.profile_picture} className="w-12" />
                <div>
                  <p className="font-bold">{props.pUser.name}</p>
                  <p>
                    {props.pUser.mattar_count}
                    のつぶやき
                  </p>
                </div>
              </div>
              <table className="my-3 border-separate border-spacing-x-2.5">
                <tbody>
                  <tr>
                    <td>
                      <p className="font-bold">1</p>
                      <p>フォロー中</p>
                    </td>
                    <td>
                      <p className="font-bold">0</p>
                      <p>フォロワー</p>
                    </td>
                    <td>
                      <p className="font-bold">0</p>
                      <p>リスト</p>
                    </td>
                  </tr>
                </tbody>
              </table>
              <div className="flex flex-col">
                <button
                  onClick={() => setPage('mattars')}
                  className={`text-left px-3 py-1 duration-300 ${
                    state === 'mattars'
                      ? 'bg-primary text-white'
                      : 'hover:bg-gray-200 dark:hover:bg-zinc-500'
                  }`}
                >
                  ツイート
                </button>
                <button
                  onClick={() => setPage('fav')}
                  className={`text-left px-3 py-1 duration-300 ${
                    state === 'fav'
                      ? 'bg-primary text-white'
                      : 'hover:bg-gray-200 dark:hover:bg-zinc-500'
                  }`}
                >
                  お気に入り
                </button>
                <button
                  onClick={() => setPage('remattars')}
                  className={`text-left px-3 py-1 duration-300 ${
                    state === 'remattars'
                      ? 'bg-primary text-white'
                      : 'hover:bg-gray-200 dark:hover:bg-zinc-500'
                  }`}
                >
                  リツイート
                </button>
              </div>
              <div className="my-4 px-3 flex">
                <input
                  placeholder="検索"
                  type="text"
                  className="text-black w-full h-9 rounded-md rounded-r-none focus:ring-0 focus:border-gray-500 border-r-0"
                />
                <Button
                  className="bg-primary px-3 h-9 border border-primary rounded-md rounded-l-none hover:opacity-80 duration-300"
                  onClick={() => {}}
                >
                  <BsSearch className="fill-white" size={18} />
                </Button>
              </div>
            </div>
          )}
          <Footer />
        </div>
      </main>
    </div>
  )
}

export const getServerSideProps: GetServerSideProps<Props> = async (ctx) => {
  const qUser = ctx.query.user
  const session = await getSession(ctx)
  if (session && session.user && session.user.id) {
    const mattars = JSON.parse(
      JSON.stringify(
        await prisma.mattar.findMany({
          where: {
            userId: qUser,
          },
          include: { user: true, favorites: true },
          orderBy: {
            createdAt: 'desc',
          },
        })
      )
    )
    const user = JSON.parse(
      JSON.stringify(
        await prisma.user.findUnique({
          where: {
            id: session.user.id,
          },
          include: {
            favorites: true,
          },
        })
      )
    )
    const pUser = JSON.parse(
      JSON.stringify(
        await prisma.user.findUnique({
          where: {
            id: qUser,
          },
        })
      )
    )
    if (!pUser) {
      return {
        notFound: true,
      }
    }
    return {
      props: {
        user,
        pUser,
        mattars,
      },
    }
  } else {
    const mattars = JSON.parse(
      JSON.stringify(
        await prisma.mattar.findMany({
          where: {
            userId: qUser,
          },
          include: { user: true, favorites: true },
          orderBy: {
            createdAt: 'desc',
          },
        })
      )
    )
    const pUser = JSON.parse(
      JSON.stringify(
        await prisma.user.findUnique({
          where: {
            id: qUser,
          },
        })
      )
    )
    if (!pUser) {
      return {
        notFound: true,
      }
    }
    return {
      props: {
        mattars,
        pUser,
      },
    }
  }
}

export default Profile
