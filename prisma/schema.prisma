// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model Mattar {
  id         String     @id @default(cuid())
  message    String
  attaches   Attach[]
  source     String
  ip         String
  userId     String
  user       User       @relation(fields: [userId], references: [id], onDelete: Cascade)
  isRemattar Boolean
  favorites  Favorite[]
  reports    Report[]
  createdAt  DateTime   @default(now())
}

model Attach {
  id       String @id @default(cuid())
  filename String
  filetype String
  width    Int
  height   Int
  mattar   Mattar? @relation(fields: [mattarId], references: [id], onDelete: Cascade)
  mattarId String?
}

model Favorite {
  id       String @id @default(cuid())
  user     User   @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId   String
  mattar   Mattar @relation(fields: [mattarId], references: [id], onDelete: Cascade)
  mattarId String
}

model User {
  id              String     @id
  name            String
  description     String?
  location        String?
  website         String?
  profile_picture String?
  birthday        String?
  lang            String?
  twofactor       String?
  hash            String
  salt            String
  email           String     @unique
  mattar_count    Int
  verified        Boolean
  verifyToken     String?
  admin           Boolean    @default(false)
  moderator       Boolean    @default(false)
  mattars         Mattar[]
  favorites       Favorite[]
  follower        User[]     @relation("UserFollows")
  following       User[]     @relation("UserFollows")
  reports        Report[]
  apiCredentials  Token?
  createdAt       DateTime   @default(now())
}

model Token {
  id     String @id @default(cuid())
  userId String @unique
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)
  token  String @unique
  secret String @unique
}

model Report {
  id       String @id @default(cuid())
  user     User   @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId   String
  mattar   Mattar @relation(fields: [mattarId], references: [id], onDelete: Cascade)
  mattarId String
  reason   String
  createdAt DateTime @default(now())
}